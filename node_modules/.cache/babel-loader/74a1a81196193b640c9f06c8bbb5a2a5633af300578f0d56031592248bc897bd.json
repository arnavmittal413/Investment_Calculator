{"ast":null,"code":"var _jsxFileName = \"F:\\\\Coding\\\\React\\\\investment calculator\\\\01-starting-project\\\\src\\\\App.js\";\nimport Header from './components/Header';\nimport InvestmentForm from './components/InvestmentForm';\nimport ResultTable from './components/ResultTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const calculateHandler = inputHandler => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentForm, {\n      onCalculata: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(ResultTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","InvestmentForm","ResultTable","jsxDEV","_jsxDEV","App","calculateHandler","inputHandler","yearlyData","currentSavings","userInput","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculata","_c","$RefreshReg$"],"sources":["F:/Coding/React/investment calculator/01-starting-project/src/App.js"],"sourcesContent":["import Header from './components/Header'\nimport InvestmentForm from './components/InvestmentForm';\nimport ResultTable from './components/ResultTable'\nfunction App() {\n  const calculateHandler = (inputHandler) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n\n  return (\n    <div>\n      <Header/>\n    <InvestmentForm onCalculata={calculateHandler}/>\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n    <ResultTable/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,qBAAqB;AACxC,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,WAAW,MAAM,0BAA0B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAClD,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,gBAAgB,GAAIC,YAAY,IAAK;IACzC;IACA;;IAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMC,kBAAkB,GAAG,CAACD,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAME,cAAc,GAAG,CAACF,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMG,QAAQ,GAAG,CAACH,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGN,cAAc,GAAGG,cAAc;MACtDH,cAAc,IAAIM,cAAc,GAAGJ,kBAAkB;MACrDH,UAAU,CAACQ,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAET,cAAc;QAChCE,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;;IAEA;EACF,CAAC;;EAED,oBACEP,OAAA;IAAAe,QAAA,gBACEf,OAAA,CAACJ,MAAM;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACXnB,OAAA,CAACH,cAAc;MAACuB,WAAW,EAAElB;IAAiB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAGhDnB,OAAA,CAACF,WAAW;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEV;AAACE,EAAA,GArCQpB,GAAG;AAuCZ,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}